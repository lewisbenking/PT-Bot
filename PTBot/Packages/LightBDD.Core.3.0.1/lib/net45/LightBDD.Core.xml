<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LightBDD.Core</name>
    </assembly>
    <members>
        <member name="T:LightBDD.Core.Configuration.ConfigurationExtensions">
            <summary>
            Extension class allowing to configure core parts of LightBDD.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Configuration.ConfigurationExtensions.StepTypeConfiguration(LightBDD.Core.Configuration.LightBddConfiguration)">
            <summary>
            Returns step type configuration.
            </summary>
            <param name="cfg">Configuration object.</param>
            <returns>Step type configuration.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.ConfigurationExtensions.CultureInfoProviderConfiguration(LightBDD.Core.Configuration.LightBddConfiguration)">
            <summary>
            Returns culture info provider configuration.
            </summary>
            <param name="cfg">Configuration object.</param>
            <returns>Culture info provider configuration.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.ConfigurationExtensions.ExecutionExtensionsConfiguration(LightBDD.Core.Configuration.LightBddConfiguration)">
            <summary>
            Return execution extensions configuration.
            </summary>
            <param name="cfg">Configuration object.</param>
            <returns>Execution extensions configuration.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.ConfigurationExtensions.ExceptionHandlingConfiguration(LightBDD.Core.Configuration.LightBddConfiguration)">
            <summary>
            Returns exception handling configuration.
            </summary>
            <param name="cfg"></param>
            <returns></returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.ConfigurationExtensions.DependencyContainerConfiguration(LightBDD.Core.Configuration.LightBddConfiguration)">
            <summary>
            Retrieves <see cref="M:LightBDD.Core.Configuration.ConfigurationExtensions.DependencyContainerConfiguration(LightBDD.Core.Configuration.LightBddConfiguration)"/> from <paramref name="configuration"/> for further customizations.
            </summary>
            <param name="configuration">Configuration object.</param>
            <returns>Configuration object.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.ConfigurationExtensions.ReportWritersConfiguration(LightBDD.Core.Configuration.LightBddConfiguration)">
            <summary>
            Retrieves <see cref="M:LightBDD.Core.Configuration.ConfigurationExtensions.ReportWritersConfiguration(LightBDD.Core.Configuration.LightBddConfiguration)"/> from <paramref name="configuration"/> for further customizations.
            </summary>
            <param name="configuration">Configuration object.</param>
            <returns>Configuration object.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.ConfigurationExtensions.NameFormatterConfiguration(LightBDD.Core.Configuration.LightBddConfiguration)">
            <summary>
            Retrieves <see cref="M:LightBDD.Core.Configuration.ConfigurationExtensions.NameFormatterConfiguration(LightBDD.Core.Configuration.LightBddConfiguration)"/> from <paramref name="configuration"/> for further customizations.
            </summary>
            <param name="configuration">Configuration object.</param>
            <returns>Configuration object.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.ConfigurationExtensions.ValueFormattingConfiguration(LightBDD.Core.Configuration.LightBddConfiguration)">
            <summary>
            Retrieves <see cref="M:LightBDD.Core.Configuration.ConfigurationExtensions.ValueFormattingConfiguration(LightBDD.Core.Configuration.LightBddConfiguration)"/> from <paramref name="configuration"/> for further customizations.
            </summary>
            <param name="configuration">Configuration object.</param>
            <returns>Configuration object.</returns>
        </member>
        <member name="T:LightBDD.Core.Configuration.CultureInfoProviderConfiguration">
            <summary>
            Culture info provider configuration.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Configuration.CultureInfoProviderConfiguration.#ctor">
            <summary>
            Default constructor configuring <see cref="T:LightBDD.Core.Extensibility.DefaultCultureInfoProvider"/> as CultureInfoProvider.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Configuration.CultureInfoProviderConfiguration.CultureInfoProvider">
            <summary>
            Culture info provider.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Configuration.CultureInfoProviderConfiguration.UpdateCultureInfoProvider(LightBDD.Core.Extensibility.ICultureInfoProvider)">
            <summary>
            Updates current culture info provider.
            </summary>
            <param name="provider">New provider instance to set.</param>
            <returns>Self.</returns>
        </member>
        <member name="T:LightBDD.Core.Configuration.DependencyContainerConfiguration">
            <summary>
            Configuration class allowing to customize DI container used by LightBDD.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Configuration.DependencyContainerConfiguration.DependencyContainer">
            <summary>
            Returns configured <see cref="T:LightBDD.Core.Dependencies.IDependencyContainer"/>.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Configuration.DependencyContainerConfiguration.UseContainer(LightBDD.Core.Dependencies.IDependencyContainer)">
            <summary>
            Sets <paramref name="container"/> as a container to be used by LightBDD scenarios and steps.
            </summary>
            <param name="container">Container to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.DependencyContainerConfiguration.UseDefaultContainer(System.Action{LightBDD.Core.Dependencies.ContainerConfigurator})">
             <summary>
             Configures the LightBDD to use it's default implementation of DI container.
             If specified, the <paramref name="configurator"/> function is used to configure the container.<br/>
            
             The default DI container features are:<br/>
             * it allows to resolve types (classes and structures) with 1 public constructor,<br/>
             * it supports constructor dependency injections,<br/>
             * it supports singleton registrations with <see cref="T:LightBDD.Core.Dependencies.ContainerConfigurator"/>,<br/>
             * it supports disposal of dependencies upon disposal, if dependency implements <see cref="T:System.IDisposable"/> interface,<br/>
             * it supports container scopes.
             </summary>
             <param name="configurator">Configuration function.</param>
             <returns>Self.</returns>
        </member>
        <member name="T:LightBDD.Core.Configuration.ExceptionHandlingConfiguration">
            <summary>
            Exception handling configuration.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Configuration.ExceptionHandlingConfiguration.ExceptionDetailsFormatter">
            <summary>
            Returns function used for formatting exceptions into step/scenario result details.
            
            The default implementation returns exception type name and message, followed by inner exception chain, followed by shortened call stack information (up to 4 methods).
            </summary>
        </member>
        <member name="M:LightBDD.Core.Configuration.ExceptionHandlingConfiguration.UpdateExceptionDetailsFormatter(System.Func{System.Exception,System.String})">
            <summary>
            Updates exception details formatter with new function.
            </summary>
            <param name="exceptionDetailsFormatter">New function to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="T:LightBDD.Core.Configuration.ExecutionExtensionsConfiguration">
            <summary>
            Execution extensions configuration allowing to enable decorators for scenarios and steps.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Configuration.ExecutionExtensionsConfiguration.ScenarioDecorators">
            <summary>
            Collection of scenario execution extensions.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Configuration.ExecutionExtensionsConfiguration.StepDecorators">
            <summary>
            Collection of step execution extensions.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Configuration.ExecutionExtensionsConfiguration.EnableScenarioDecorator``1">
            <summary>
            Enables scenario decorator of specified type.
            If decorator is already enabled the method does nothing.
            </summary>
            <typeparam name="TScenarioDecorator">Decorator type to enable.</typeparam>
            <returns>Self.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.ExecutionExtensionsConfiguration.EnableScenarioDecorator``1(System.Func{``0})">
            <summary>
            Enables scenario decorator of specified type.
            If decorator is already enabled the method does nothing.
            If decorator is not enabled yet, the given <c>factory</c> parameter would be used to instantiate it.
            </summary>
            <typeparam name="TScenarioDecorator">Decorator type to enable.</typeparam>
            <param name="factory">Factory used to instantiate decorator.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.ExecutionExtensionsConfiguration.EnableStepDecorator``1(System.Func{``0})">
            <summary>
            Enables step decorator of specified type.
            If decorator is already enabled the method does nothing.
            If decorator is not enabled yet, the given <c>factory</c> parameter would be used to instantiate it.
            </summary>
            <typeparam name="TStepDecorator">Decorator type to enable.</typeparam>
            <param name="factory">Factory used to instantiate decorator.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.ExecutionExtensionsConfiguration.EnableStepDecorator``1">
            <summary>
            Enables scenario decorator of specified type.
            If decorator is already enabled the method does nothing.
            </summary>
            <typeparam name="TStepDecorator">Decorator type to enable.</typeparam>
            <returns>Self.</returns>
        </member>
        <member name="T:LightBDD.Core.Configuration.FeatureConfiguration">
            <summary>
            A base class of FeatureConfiguration with sealed state detection.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Configuration.FeatureConfiguration.IsSealed">
            <summary>
            Returns true if configuration is sealed.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Configuration.FeatureConfiguration.ThrowIfSealed">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> when configuration is already sealed.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when configuration is sealed.</exception>
        </member>
        <member name="T:LightBDD.Core.Configuration.IFeatureConfiguration">
            <summary>
            Marker interface specifying that class describes LightBDD feature configuration.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Configuration.ISealableFeatureConfiguration">
            <summary>
            A LightBDD feature configuration that could be sealed, making it immutable.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Configuration.ISealableFeatureConfiguration.Seal">
            <summary>
            Seals the configuration making it immutable.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Configuration.LightBddConfiguration">
            <summary>
            LightBDD feature configuration class allowing to configure and/or obtain LightBDD features configuration.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Configuration.LightBddConfiguration.Get``1">
            <summary>
            Returns current feature configuration of requested type.
            If there was no configuration specified for given feature, the default configuration would be instantiated and returned for further customizations.
            </summary>
            <typeparam name="TConfiguration">Feature configuration type.</typeparam>
            <returns>Feature configuration instance.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.LightBddConfiguration.Seal">
            <summary>
            Seals configuration making it immutable.
            It calls <see cref="M:LightBDD.Core.Configuration.ISealableFeatureConfiguration.Seal"/>() method on all configuration items that implements the <see cref="T:LightBDD.Core.Configuration.ISealableFeatureConfiguration"/> interface.
            Since this call, the <see cref="M:LightBDD.Core.Configuration.LightBddConfiguration.Get``1"/>() method will return only sealed configuration (current, and future default one).
            </summary>
            <returns>Self.</returns>
        </member>
        <member name="P:LightBDD.Core.Configuration.LightBddConfiguration.IsSealed">
            <summary>
            Returns true if configuration is sealed.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Configuration.NameFormatterConfiguration">
            <summary>
            Configuration class allowing to customize name formatting behavior.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Configuration.NameFormatterConfiguration.GetFormatter">
            <summary>
            Returns formatter.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when formatter was not set.</exception>
        </member>
        <member name="M:LightBDD.Core.Configuration.NameFormatterConfiguration.UpdateFormatter(LightBDD.Core.Formatting.INameFormatter)">
            <summary>
            Sets <paramref name="formatter"/> as a default formatter to be used by LightBDD. The formatter can be retrieved by <see cref="M:LightBDD.Core.Configuration.NameFormatterConfiguration.GetFormatter"/>() method call.
            </summary>
            <param name="formatter">New formatter to set.</param>
            <returns>Self.</returns>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="formatter"/> is null.</exception>
        </member>
        <member name="T:LightBDD.Core.Configuration.ReportWritersConfiguration">
            <summary>
            Configuration class allowing to customize report writers.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Configuration.ReportWritersConfiguration.Add(LightBDD.Core.Reporting.IReportWriter)">
            <summary>
            Adds <paramref name="writer"/> to report writers collection.
            </summary>
            <param name="writer">Writer to add.</param>
            <returns>Self.</returns>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="writer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:LightBDD.Core.Configuration.ReportWritersConfiguration.Remove(LightBDD.Core.Reporting.IReportWriter)">
            <summary>
            Removes specified, previously configured writer.
            </summary>
            <param name="writer">Writer instance to remove.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.ReportWritersConfiguration.Clear">
            <summary>
            Removes all previously configured report writers.
            </summary>
            <returns>Self.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.ReportWritersConfiguration.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:LightBDD.Core.Configuration.StepTypeConfiguration">
            <summary>
            Step type configuration allowing to define step types recognized by LightBDD.
            </summary>
        </member>
        <member name="F:LightBDD.Core.Configuration.StepTypeConfiguration.DefaultRepeatedStepReplacement">
            <summary>
            Default repeated step replacement: and
            </summary>
        </member>
        <member name="F:LightBDD.Core.Configuration.StepTypeConfiguration.DefaultPredefinedStepTypes">
            <summary>
            Default predefined step types: given, when, then, setup, and
            </summary>
        </member>
        <member name="M:LightBDD.Core.Configuration.StepTypeConfiguration.#ctor">
            <summary>
            Default constructor initializing configuration with <see cref="F:LightBDD.Core.Configuration.StepTypeConfiguration.DefaultRepeatedStepReplacement"/> and <see cref="F:LightBDD.Core.Configuration.StepTypeConfiguration.DefaultPredefinedStepTypes"/>.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Configuration.StepTypeConfiguration.RepeatedStepReplacement">
            <summary>
            Current value of repeated step replacement that would be used to replace consecutive steps of the same type.
            See also: <seealso cref="T:LightBDD.Core.Configuration.StepTypeConfiguration"/>.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Configuration.StepTypeConfiguration.PredefinedStepTypes">
            <summary>
            Current collection of predefined step types that would be used to recognize step type in the parsed step method name.
            See also: <seealso cref="T:LightBDD.Core.Configuration.StepTypeConfiguration"/>.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Configuration.StepTypeConfiguration.UpdatePredefinedStepTypes(System.String[])">
            <summary>
            Updates current predefined step types.
            </summary>
            <param name="stepTypes">New step types to set.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.StepTypeConfiguration.UpdateRepeatedStepReplacement(System.String)">
            <summary>
            Updates current repeated step replacement.
            </summary>
            <param name="replacement">Replacement to set.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.StepTypeConfiguration.UpdateUseLambdaNameAsStepType(System.Func{System.String,System.Boolean})">
            <summary>
            Updates <see cref="P:LightBDD.Core.Configuration.StepTypeConfiguration.UseLambdaNameAsStepType"/> with new function.
            </summary>
            <param name="useLambdaNameAsStepTypeFunction">Function to use.</param>
            <returns>Self.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="useLambdaNameAsStepTypeFunction"/> is null.</exception>
        </member>
        <member name="P:LightBDD.Core.Configuration.StepTypeConfiguration.UseLambdaNameAsStepType">
            <summary>
            Function defining if given lambda parameter name should be used as step type.
            By default any name with length longer than 1 character will be treated as a valid step type while names with 1 character will not.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Configuration.ValueFormattingConfiguration">
            <summary>
            Configuration allowing to define explicit and general value formatters that would be used to format parameters of all scenarios and steps.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Configuration.ValueFormattingConfiguration.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Configuration.ValueFormattingConfiguration.ExplicitFormatters">
            <summary>
            Returns explicit formatters that would be used to format values of type defined as a key.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Configuration.ValueFormattingConfiguration.GeneralFormatters">
             <summary>
             Returns general formatters that would be used to format values of any type acceptable by <see cref="M:LightBDD.Core.Formatting.Values.IConditionalValueFormatter.CanFormat(System.Type)"/>() method.
            
             Please note that general formatters would be used only if there is no suitable formatter in <see cref="P:LightBDD.Core.Configuration.ValueFormattingConfiguration.ExplicitFormatters"/> collection.
             If above condition is meet, the first suitable general formatter would be used.
             </summary>
        </member>
        <member name="M:LightBDD.Core.Configuration.ValueFormattingConfiguration.ClearGeneral">
            <summary>
            Clears all general formatters.
            </summary>
            <returns>Self.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.ValueFormattingConfiguration.ClearExplicit">
            <summary>
            Clears all explicit formatters but registers required formatters such as formatter for <see cref="T:System.String"/> type.
            </summary>
            <returns>Self.</returns>
        </member>
        <member name="M:LightBDD.Core.Configuration.ValueFormattingConfiguration.RegisterExplicit(System.Type,LightBDD.Core.Formatting.Values.IValueFormatter)">
            <summary>
            Registers the explicit formatter specified by <paramref name="formatter"/> parameter that would be used to format values of <paramref name="targetType"/> type.
            If there is already an explicit formatter specified for <paramref name="targetType"/> type, it would be overriden with new formatter.
            </summary>
            <param name="targetType">Type that would be formatted.</param>
            <param name="formatter">Formatter used to format given type.</param>
            <returns>Self.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="targetType"/> or <paramref name="formatter"/> is null.</exception>
        </member>
        <member name="M:LightBDD.Core.Configuration.ValueFormattingConfiguration.RegisterGeneral(LightBDD.Core.Formatting.Values.IConditionalValueFormatter)">
             <summary>
             Registers the general formatter specified by <paramref name="formatter"/> parameter that would be used to format values of any type acceptable by <see cref="M:LightBDD.Core.Formatting.Values.IConditionalValueFormatter.CanFormat(System.Type)"/>() method.
            
             Please note that general formatters would be used only if there is no suitable formatter in <see cref="P:LightBDD.Core.Configuration.ValueFormattingConfiguration.ExplicitFormatters"/> collection.
             If above condition is meet, the first suitable general formatter would be used.
             </summary>
             <param name="formatter"></param>
             <returns>Self.</returns>
             <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="formatter"/> is null.</exception>
        </member>
        <member name="T:LightBDD.Core.Dependencies.ContainerConfigurator">
            <summary>
            An abstract class allowing to configure container.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Dependencies.ContainerConfigurator.RegisterInstance(System.Object,LightBDD.Core.Dependencies.RegistrationOptions)">
             <summary>
             Registers the <paramref name="instance"/> in the container.
             If provided instance implements <see cref="T:System.IDisposable"/> interface, it will be disposed with container disposal, unless <see cref="P:LightBDD.Core.Dependencies.RegistrationOptions.IsExternallyOwned"/> is set to true in <paramref name="options"/> parameter.
            
             The <paramref name="options"/> parameter allows to configure registration of the <paramref name="instance"/>.
             </summary>
             <param name="instance">Instance to register.</param>
             <param name="options">Registration options.</param>
        </member>
        <member name="T:LightBDD.Core.Dependencies.DependencyResolverExtensions">
            <summary>
            Extension class for <see cref="T:LightBDD.Core.Dependencies.IDependencyResolver"/>.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Dependencies.DependencyResolverExtensions.Resolve``1(LightBDD.Core.Dependencies.IDependencyResolver)">
            <summary>
            Resolves dependency of the specified type.
            </summary>
            <typeparam name="TDependency">Type of dependency.</typeparam>
            <param name="resolver">Resolver.</param>
            <returns>Resolved instance.</returns>
        </member>
        <member name="T:LightBDD.Core.Dependencies.IDependencyContainer">
            <summary>
            Interface describing dependency container that is able to resolve dependencies as well as create inner scopes.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Dependencies.IDependencyContainer.BeginScope(System.Action{LightBDD.Core.Dependencies.ContainerConfigurator})">
            <summary>
            Creates new scope based on the current container and the additional <paramref name="configuration"/> if specified.
            The exact behavior of the new scopes will depend on the implementation, but there is a general expectation that objects resolved with the new scope should be disposed with scope disposal.
            The created scope should be disposed after use and should be disposed before the parent scope.
            </summary>
            <param name="configuration">An additional configuration that, if specified, should be applied on the scope.</param>
            <returns>New scope.</returns>
        </member>
        <member name="T:LightBDD.Core.Dependencies.IDependencyResolver">
            <summary>
            Interface allowing to resolve dependencies.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Dependencies.IDependencyResolver.Resolve(System.Type)">
            <summary>
            Resolves dependency of type specified by <paramref name="type"/> parameter.
            </summary>
            <param name="type">Dependency type.</param>
            <returns>Resolved dependency.</returns>
        </member>
        <member name="T:LightBDD.Core.Dependencies.RegistrationOptions">
            <summary>
            Dependency registration options.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Dependencies.RegistrationOptions.IsExternallyOwned">
            <summary>
            Returns true if configured dependency is externally owned or false if container controls it's lifetime.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Dependencies.RegistrationOptions.AsTypes">
            <summary>
            Returns list of types for whose configured dependency should be returned during resolution.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Dependencies.RegistrationOptions.IsRegisteredAsSelf">
            <summary>
            Returns true if <see cref="P:LightBDD.Core.Dependencies.RegistrationOptions.AsTypes"/> is empty and the configured dependency should be resolvable by it's implementation type.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Dependencies.RegistrationOptions.ExternallyOwned">
            <summary>
            Specifies that configured dependency is maintained externally to the container, so that it should not be disposed during container disposal.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Dependencies.RegistrationOptions.As(System.Type[])">
            <summary>
            Adds types specified by <paramref name="types"/> parameter to the list of types for whose the configured dependency should be returned during resolution.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Dependencies.RegistrationOptions.As``1">
            <summary>
            Adds <typeparamref name="T"/> to the list of types for whose the configured dependency should be returned during resolution.
            </summary>
        </member>
        <member name="T:LightBDD.Core.ExecutionContext.AsyncLocalContext`1">
            <summary>
            Class offering async local storage
            </summary>
            <typeparam name="T">Stored value</typeparam>
        </member>
        <member name="P:LightBDD.Core.ExecutionContext.AsyncLocalContext`1.Value">
            <summary>
            Allows to get and set value to store.
            </summary>
        </member>
        <member name="T:LightBDD.Core.ExecutionContext.IContextProperty">
            <summary>
            Marker interface describing execution context property.
            </summary>
        </member>
        <member name="T:LightBDD.Core.ExecutionContext.ScenarioExecutionContext">
            <summary>
            Scenario execution context class allowing to store and retrieve scenario properties that would be available for all steps and tasks executed within the scenario.
            </summary>
        </member>
        <member name="M:LightBDD.Core.ExecutionContext.ScenarioExecutionContext.Get``1">
            <summary>
            Provides property value of <typeparamref name="TProperty"/> type that is stored in scenario context.
            If such property does not exists yet, a new instance will be registered in context and returned.
            </summary>
            <typeparam name="TProperty">Property type to retrieve.</typeparam>
            <returns>Property object.</returns>
        </member>
        <member name="P:LightBDD.Core.ExecutionContext.ScenarioExecutionContext.Current">
            <summary>
            Returns current scenario execution context.
            <exception cref="T:System.InvalidOperationException">Throws when <see cref="P:LightBDD.Core.ExecutionContext.ScenarioExecutionContext.Current"/> property is accessed from outside of scenario method or if <see cref="T:LightBDD.Core.ExecutionContext.ScenarioExecutionContext"/> feature is not enabled.</exception>
            </summary>
        </member>
        <member name="P:LightBDD.Core.ExecutionContext.ScenarioExecutionContext.CurrentStep">
            <summary>
            Returns currently executed step.
            <exception cref="T:System.InvalidOperationException">Thrown if no step is executed by current task.</exception>
            </summary>
        </member>
        <member name="P:LightBDD.Core.ExecutionContext.ScenarioExecutionContext.CurrentScenario">
            <summary>
            Returns currently executed scenario.
            <exception cref="T:System.InvalidOperationException">Thrown if no scenario is executed by current task.</exception>
            </summary>
        </member>
        <member name="T:LightBDD.Core.Execution.Coordination.FeatureCoordinator">
            <summary>
            Feature coordinator class holding <see cref="T:LightBDD.Core.Extensibility.FeatureRunnerRepository"/> allowing to instantiate runners as well as <see cref="T:LightBDD.Core.Execution.Coordination.IFeatureAggregator"/> used for aggregate execution results on coordinator disposal.
            The <see cref="M:LightBDD.Core.Execution.Coordination.FeatureCoordinator.Install(LightBDD.Core.Execution.Coordination.FeatureCoordinator)"/> method allows to install instance that will be used in test execution cycle.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Execution.Coordination.FeatureCoordinator.Instance">
            <summary>
            Feature coordinator instance.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Execution.Coordination.FeatureCoordinator.RunnerRepository">
            <summary>
            Runner factory.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Execution.Coordination.FeatureCoordinator.IsDisposed">
            <summary>
            Returns <c>true</c> if already disposed, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Execution.Coordination.FeatureCoordinator.Configuration">
            <summary>
            Returns <see cref="T:LightBDD.Core.Configuration.LightBddConfiguration"/> configuration used for instantiating <see cref="T:LightBDD.Core.Execution.Coordination.FeatureCoordinator"/>.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Execution.Coordination.FeatureCoordinator.ValueFormattingService">
            <summary>
            Returns <see cref="T:LightBDD.Core.Formatting.Values.IValueFormattingService"/> configured in this coordinator.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Execution.Coordination.FeatureCoordinator.GetInstance">
            <summary>
            Returns instance of installed <see cref="T:LightBDD.Core.Execution.Coordination.FeatureCoordinator"/>.
            </summary>
            <returns>Instance of <see cref="T:LightBDD.Core.Execution.Coordination.FeatureCoordinator"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="T:LightBDD.Core.Execution.Coordination.FeatureCoordinator"/> instance is not installed yet or already disposed.</exception>
        </member>
        <member name="M:LightBDD.Core.Execution.Coordination.FeatureCoordinator.TryGetInstance">
            <summary>
            Returns the installed instance of <see cref="T:LightBDD.Core.Execution.Coordination.FeatureCoordinator"/> or null if instance is not installed (or already disposed).
            </summary>
            <returns><see cref="T:LightBDD.Core.Execution.Coordination.FeatureCoordinator"/> or null.</returns>
        </member>
        <member name="M:LightBDD.Core.Execution.Coordination.FeatureCoordinator.Install(LightBDD.Core.Execution.Coordination.FeatureCoordinator)">
            <summary>
            Installs the specified feature coordinator in thread safe manner.
            The installed instance will be used by LightBDD to coordinate tests execution and generate reports upon disposal.
            It is only possible to have one installed instance at given time, however upon disposal, the coordinator uninstalls self, allowing to install new one if needed and start another test cycle.
            </summary>
            <param name="coordinator">Coordinator instance to install.</param>
            <exception cref="T:System.InvalidOperationException">Exception thrown if another coordinator is already installed.</exception>
        </member>
        <member name="M:LightBDD.Core.Execution.Coordination.FeatureCoordinator.#ctor(LightBDD.Core.Extensibility.IntegrationContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context">Integration context.</param>
        </member>
        <member name="M:LightBDD.Core.Execution.Coordination.FeatureCoordinator.Dispose">
            <summary>
            Disposes coordinator, triggering feature result aggregation.
            Each runner belonging to <see cref="P:LightBDD.Core.Execution.Coordination.FeatureCoordinator.RunnerRepository"/>, is disposed and its feature result is aggregated.
            After aggregation of all results, the feature aggregator is disposed as well.
            
            If coordinator is installed as LightBDD main coordinator, it is uninstalled as well, allowing a new one to be installed in future.
            If coordinator is already disposed, methods does nothing.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Execution.Coordination.IFeatureAggregator">
            <summary>
            Feature aggregator interface for collecting feature results.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Execution.Coordination.IFeatureAggregator.Aggregate(LightBDD.Core.Results.IFeatureResult)">
            <summary>
            Aggregates given feature result.
            </summary>
            <param name="featureResult">Feature result to aggregate.</param>
        </member>
        <member name="T:LightBDD.Core.Execution.IComplexParameter">
            <summary>
            Interface describing a method parameter that is verifiable.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Execution.IComplexParameter.SetValueFormattingService(LightBDD.Core.Formatting.Values.IValueFormattingService)">
            <summary>
            Updates parameter with <see cref="T:LightBDD.Core.Formatting.Values.IValueFormattingService"/> that should be used to format expected/actual values.
            </summary>
            <param name="formattingService">Formatting service to use.</param>
        </member>
        <member name="P:LightBDD.Core.Execution.IComplexParameter.Details">
            <summary>
            Returns parameter details.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Execution.IExecutable">
            <summary>
            Interface allowing to configure executable object (scenario or step).
            </summary>
        </member>
        <member name="M:LightBDD.Core.Execution.IExecutable.ConfigureExecutionAbortOnSubStepException(System.Func{System.Exception,System.Boolean})">
            <summary>
            Allows to install function specifying if given exception should abort execution of other sub-steps belonging to current scenario or step.
            If <paramref name="shouldAbortExecutionFn"/> function return false, the remaining sub-steps will be executed.
            Any suppressed exceptions would be provided to parent step/scenario after step group execution.
            If any sub-step execution finish with failed status, an <see cref="T:System.AggregateException"/> will be thrown with exceptions of all failed sub-steps.
            If none sub-steps failed but there are some with ignored status, the exception of first ignored sub-step would be thrown in order to properly ignore test in underlying test framework.
            </summary>
            <param name="shouldAbortExecutionFn">Function returning true if given exception should abort further execution or should allow to execute further sub-steps within group.</param>
        </member>
        <member name="T:LightBDD.Core.Execution.IRunnableScenario">
            <summary>
            Interface representing runnable scenario.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Execution.IRunnableScenario.ExecuteAsync">
            <summary>
            Executes scenario.
            Any exceptions thrown in scenario steps will be wrapped in <see cref="T:LightBDD.Core.Execution.ScenarioExecutionException"/>. Code calling this method can rethrow the original exception by calling <code>ex.GetOriginal().Throw()</code>
            </summary>
            <exception cref="T:LightBDD.Core.Execution.ScenarioExecutionException">Thrown when any exception occurs during execution.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when scenario was already executed.</exception>
        </member>
        <member name="T:LightBDD.Core.Execution.IScenario">
            <summary>
            Interface describing current scenario.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Execution.IScenario.Info">
            <summary>
            Scenario information details.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Execution.IScenario.DependencyResolver">
            <summary>
            Returns the dependency resolver used by this scenario.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Execution.IScenario.Context">
            <summary>
            Returns the context used by this scenario (or null if none were provided).
            </summary>
        </member>
        <member name="T:LightBDD.Core.Execution.IStep">
            <summary>
            Interface describing current step, providing step information details and ability to comment it.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Execution.IStep.Info">
            <summary>
            Step information details.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Execution.IStep.Comment(System.String)">
            <summary>
            Annotates step with comment.
            It is possible to comment step many times.
            </summary>
            <param name="comment">Comment.</param>
        </member>
        <member name="P:LightBDD.Core.Execution.IStep.DependencyResolver">
            <summary>
            Returns the dependency resolver used by this step.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Execution.IStep.Context">
            <summary>
            Returns the context used by this step (or null if none were provided).
            </summary>
        </member>
        <member name="T:LightBDD.Core.Execution.RunnableScenarioExtensions">
            <summary>
            Runnable scenario extensions.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Execution.RunnableScenarioExtensions.ExecuteSync(LightBDD.Core.Execution.IRunnableScenario)">
            <summary>
            Executes scenario synchronously, throwing <see cref="T:System.InvalidOperationException"/> if scenario did not finished execution upon return.
            </summary>
            <param name="scenario">Scenario</param>
            <exception cref="T:System.InvalidOperationException">Thrown if scenario did not finished upon return or scenario was already executed.</exception>
            <exception cref="T:LightBDD.Core.Execution.ScenarioExecutionException">Thrown when any exception occurs during execution.</exception>
        </member>
        <member name="T:LightBDD.Core.Execution.ScenarioExecutionException">
            <summary>
            Exception indicating that step or scenario thrown an exception.
            It's purpose is to allow LightBDD engine to process exception and eventually report them back to the underlying test frameworks without exposing LightBDD internal stack frames.
            
            The inner exception represents original one that has been thrown by step/scenario.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Execution.ScenarioExecutionException.#ctor(System.Exception)">
            <summary>
            Constructor allowing to specify inner exception
            </summary>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:LightBDD.Core.Execution.ScenarioExecutionException.GetOriginal">
            <summary>
            Returns <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo"/> of the original exception, allowing to rethrow it.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Execution.ScenarioExecutionFlow">
            <summary>
            Class helping to wrap scenario/step specific exceptions with <see cref="T:LightBDD.Core.Execution.ScenarioExecutionException"/> that allows to propagate original exception with bypassing LightBDD internal stack frames.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Execution.ScenarioExecutionFlow.WrapScenarioExceptions(System.Threading.Tasks.Task)">
            <summary>
            Wraps <paramref name="targetTask"/> with awaitable that will wrap task exception with <see cref="T:LightBDD.Core.Execution.ScenarioExecutionException"/> without recording exception capture on exception's stack trace
            </summary>
        </member>
        <member name="M:LightBDD.Core.Execution.ScenarioExecutionFlow.WrapScenarioExceptions``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Wraps <paramref name="targetTask"/> with awaitable that will wrap task exception with <see cref="T:LightBDD.Core.Execution.ScenarioExecutionException"/> without recording exception capture on exception's stack trace
            </summary>
        </member>
        <member name="T:LightBDD.Core.Execution.ScenarioExecutionFlow.ScenarioExceptionWrappingAwaitable">
            <summary>
            Awaitable allowing to wrap task exception with <see cref="T:LightBDD.Core.Execution.ScenarioExecutionException"/> without recording exception capture on exception's stack trace
            </summary>
        </member>
        <member name="M:LightBDD.Core.Execution.ScenarioExecutionFlow.ScenarioExceptionWrappingAwaitable.GetAwaiter">
            <summary>
            Returns self.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Execution.ScenarioExecutionFlow.ScenarioExceptionWrappingAwaitable.IsCompleted">
            <summary>
            Returns true if task is completed.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Execution.ScenarioExecutionFlow.ScenarioExceptionWrappingAwaitable.OnCompleted(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:LightBDD.Core.Execution.ScenarioExecutionFlow.ScenarioExceptionWrappingAwaitable.UnsafeOnCompleted(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:LightBDD.Core.Execution.ScenarioExecutionFlow.ScenarioExceptionWrappingAwaitable.GetResult">
            <summary>
            Returns waits for task to finish and throws <see cref="T:LightBDD.Core.Execution.ScenarioExecutionException"/> if task failed.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Execution.ScenarioExecutionFlow.ScenarioExceptionWrappingAwaitable`1">
            <summary>
            Awaitable allowing to wrap task exception with <see cref="T:LightBDD.Core.Execution.ScenarioExecutionException"/> without recording exception capture on exception's stack trace
            </summary>
        </member>
        <member name="M:LightBDD.Core.Execution.ScenarioExecutionFlow.ScenarioExceptionWrappingAwaitable`1.GetAwaiter">
            <summary>
            Returns self.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Execution.ScenarioExecutionFlow.ScenarioExceptionWrappingAwaitable`1.IsCompleted">
            <summary>
            Returns true if task is completed.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Execution.ScenarioExecutionFlow.ScenarioExceptionWrappingAwaitable`1.OnCompleted(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:LightBDD.Core.Execution.ScenarioExecutionFlow.ScenarioExceptionWrappingAwaitable`1.UnsafeOnCompleted(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:LightBDD.Core.Execution.ScenarioExecutionFlow.ScenarioExceptionWrappingAwaitable`1.GetResult">
            <summary>
            Waits for task to finish and returns task result or throws <see cref="T:LightBDD.Core.Execution.ScenarioExecutionException"/> if task failed.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Execution.StepBypassException">
            <summary>
            Step bypass exception used to mark step bypassed
            </summary>
        </member>
        <member name="M:LightBDD.Core.Execution.StepBypassException.#ctor(System.String)">
            <summary>
            Constructor allowing to specify bypass reason.
            </summary>
            <param name="reason">Bypass reason.</param>
        </member>
        <member name="T:LightBDD.Core.Extensibility.CoreMetadataProvider">
            <summary>
            Metadata provider offering core implementation for providing feature, scenario and step metadata.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.CoreMetadataProvider.ValueFormattingService">
            <summary>
            Returns <see cref="T:LightBDD.Core.Formatting.Values.ValueFormattingService"/> .
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.CoreMetadataProvider.NameFormatter">
            <summary>
            Returns <see cref="T:LightBDD.Core.Formatting.INameFormatter"/>.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.#ctor(LightBDD.Core.Configuration.LightBddConfiguration)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetFeatureInfo(System.Type)">
            <summary>
            Provides <see cref="T:LightBDD.Core.Metadata.IFeatureInfo"/> object containing information about feature represented by <paramref name="featureType"/>.
            
            The <see cref="P:LightBDD.Core.Metadata.IFeatureInfo.Name"/> is determined from the <paramref name="featureType"/> name.
            The <see cref="P:LightBDD.Core.Metadata.IFeatureInfo.Labels"/> are determined from attributes implementing <see cref="T:LightBDD.Core.Extensibility.ILabelAttribute"/>, applied on <paramref name="featureType"/>.
            The <see cref="P:LightBDD.Core.Metadata.IFeatureInfo.Description"/> is determined from attribute implementing <see cref="T:LightBDD.Core.Extensibility.IFeatureDescriptionAttribute"/> in first instance, then by <see cref="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetImplementationSpecificFeatureDescription(System.Type)"/>() method. The value may be <c>null</c>.
            </summary>
            <param name="featureType">Feature type.</param>
            <returns><see cref="T:LightBDD.Core.Metadata.IFeatureInfo"/> object.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetScenarioLabels(System.Reflection.MethodBase)">
            <summary>
            Provides scenario labels for scenario represented by <paramref name="scenarioMethod"/> which are determined from attributes implementing <see cref="T:LightBDD.Core.Extensibility.ILabelAttribute"/>, applied on the method.
            </summary>
            <param name="scenarioMethod">Scenario method.</param>
            <returns>Scenario labels.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetScenarioCategories(System.Reflection.MethodBase)">
            <summary>
            Provides scenario categories for scenario represented by <paramref name="scenarioMethod"/>.
            The categories are determined from attributes implementing <see cref="T:LightBDD.Core.Extensibility.IScenarioCategoryAttribute"/>, applied on <paramref name="scenarioMethod"/> and type declaring the method,
            as well as from <see cref="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetImplementationSpecificScenarioCategories(System.Reflection.MemberInfo)"/>() executed on <paramref name="scenarioMethod"/> and type declaring the method.
            
            The categories specified on base classes will also be retrieved.
            </summary>
            <param name="scenarioMethod">Scenario method.</param>
            <returns>Scenario categories.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetStepName(LightBDD.Core.Extensibility.StepDescriptor,System.String)">
            <summary>
            Provides <see cref="T:LightBDD.Core.Metadata.IStepNameInfo"/> object containing information about step name represented by <paramref name="stepDescriptor"/>.
            The <paramref name="previousStepTypeName"/> represents the step type name of previous step.
            <para>
            The <see cref="P:LightBDD.Core.Metadata.IStepNameInfo.StepTypeName"/> is determined from value <see cref="P:LightBDD.Core.Extensibility.StepDescriptor.PredefinedStepType"/> or parsed from <see cref="P:LightBDD.Core.Extensibility.StepDescriptor.RawName"/> if former is <c>null</c>.
            When determined step type is the same as <paramref name="previousStepTypeName"/>, it is being replaced with <see cref="P:LightBDD.Core.Configuration.StepTypeConfiguration.RepeatedStepReplacement"/>.
            </para>
            See also: <seealso cref="T:LightBDD.Core.Configuration.StepTypeConfiguration"/>, <seealso cref="T:LightBDD.Core.Configuration.LightBddConfiguration"/>.
            </summary>
            <param name="stepDescriptor">Step descriptor.</param>
            <param name="previousStepTypeName">Step type name of previous step, or <c>null</c> if current step is first one.</param>
            <returns><see cref="T:LightBDD.Core.Metadata.IStepNameInfo"/> object.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetValueFormattingServiceFor(System.Reflection.ParameterInfo)">
            <summary>
            Returns <see cref="T:LightBDD.Core.Formatting.Values.IValueFormattingService"/> instance for provided <paramref name="parameterInfo"/>.
            The returned formatting service is aware of any <see cref="T:LightBDD.Core.Formatting.Parameters.ParameterFormatterAttribute"/> instance(s) are applied on <paramref name="parameterInfo"/> and would use them to format value before any other configured formatters.
            If many instances of <see cref="T:LightBDD.Core.Formatting.Parameters.ParameterFormatterAttribute"/> are present, they would be applied in <see cref="P:LightBDD.Core.Extensibility.IOrderedAttribute.Order"/> order.
            </summary>
            <param name="parameterInfo"><see cref="T:System.Reflection.ParameterInfo"/> object describing step or scenario method parameter.</param>
            <returns><see cref="T:LightBDD.Core.Formatting.Values.IValueFormattingService"/> instance.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetStepDecorators(LightBDD.Core.Extensibility.StepDescriptor)">
            <summary>
            Returns a collection of <see cref="T:LightBDD.Core.Extensibility.Execution.IStepDecorator"/> decorators that are applied on step described by <paramref name="stepDescriptor"/> parameter.
            The <see cref="T:LightBDD.Core.Extensibility.Execution.IStepDecorator"/> are inferred from declaring type and method attributes that implements <see cref="T:LightBDD.Core.Extensibility.Execution.IStepDecoratorAttribute"/> type.
            The returned collection would be sorted ascending based on <see cref="P:LightBDD.Core.Extensibility.IOrderedAttribute.Order"/> from declaring type and then based on <see cref="P:LightBDD.Core.Extensibility.IOrderedAttribute.Order"/> from method.
            </summary>
            <param name="stepDescriptor">Step descriptor.</param>
            <returns>Collection of decorators or empty collection if none are present.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetScenarioDecorators(LightBDD.Core.Extensibility.ScenarioDescriptor)">
            <summary>
            Returns a collection of <see cref="T:LightBDD.Core.Extensibility.Execution.IScenarioDecorator"/> decorators that are applied on scenario described by <paramref name="scenarioDescriptor"/> parameter.
            The <see cref="T:LightBDD.Core.Extensibility.Execution.IScenarioDecorator"/> are inferred from declaring type and method attributes that implements <see cref="T:LightBDD.Core.Extensibility.Execution.IScenarioDecoratorAttribute"/> type.
            The returned collection would be sorted ascending based on <see cref="P:LightBDD.Core.Extensibility.IOrderedAttribute.Order"/> from declaring type and then based on <see cref="P:LightBDD.Core.Extensibility.IOrderedAttribute.Order"/> from method.
            </summary>
            <param name="scenarioDescriptor">Scenario descriptor.</param>
            <returns>Collection of decorators or empty collection if none are present.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetImplementationSpecificScenarioCategories(System.Reflection.MemberInfo)">
            <summary>
            Returns implementation specific scenario categories or empty collection if no categories are provided.
            </summary>
            <param name="member">Scenario method or feature test class to analyze.</param>
            <returns>Scenario categories or empty collection.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetImplementationSpecificFeatureDescription(System.Type)">
            <summary>
            Returns implementation specific feature description or null if such is not provided.
            </summary>
            <param name="featureType">Feature type.</param>
            <returns>Feature description or null.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.ExtractAttributePropertyValue``1(System.Reflection.MemberInfo,System.Func{``0,System.String})">
            <summary>
            Provides value of attribute of type <typeparamref name="TAttribute"/> applied on <paramref name="member"/> or default if attribute is not applied.
            The attribute is searched in <paramref name="member"/> and it's ancestors.
            </summary>
            <param name="member">Member to analyze for specified attribute.</param>
            <param name="valueExtractor">Attribute value extraction method.</param>
            <typeparam name="TAttribute">Type of attribute to extract.</typeparam>
            <returns>Attribute value or default.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when attribute is applied more than once.</exception>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.ExtractAttributePropertyValues``1(System.Reflection.MemberInfo,System.Func{``0,System.String})">
            <summary>
            Provides values of all attributes of type <typeparamref name="TAttribute"/> applied on <paramref name="member"/> or empty collection if none are applied.
            The attribute is searched in <paramref name="member"/> and it's ancestors.
            </summary>
            <param name="member">Member to analyze for specified attribute.</param>
            <param name="valueExtractor">Attribute value extraction method.</param>
            <typeparam name="TAttribute">Type of attribute to extract.</typeparam>
            <returns>Values of all attributes or empty collection.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.ExtractAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Provides all attributes of type <typeparamref name="TAttribute"/> applied on <paramref name="member"/> or empty collection if none are applied.
            The attribute is searched in <paramref name="member"/> and it's ancestors.
            </summary>
            <param name="member">Member to analyze for specified attribute.</param>
            <typeparam name="TAttribute">Type of attribute to extract.</typeparam>
            <returns>All attributes or empty collection.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.ExtractAttributes``1(System.Type)">
            <summary>
            Provides all attributes of type <typeparamref name="TAttribute"/> applied on <paramref name="type"/> or empty collection if none are applied.
            The attribute is searched in <paramref name="type"/>.
            </summary>
            <param name="type">Type to analyze for specified attribute.</param>
            <typeparam name="TAttribute">Type of attribute to extract.</typeparam>
            <returns>All attributes or empty collection.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetFeatureLabels(System.Type)">
            <summary>
            Provides labels from  attributes implementing <see cref="T:LightBDD.Core.Extensibility.ILabelAttribute"/>, applied on <paramref name="featureType"/>, or empty array if none are present.
            </summary>
            <param name="featureType">Feature type.</param>
            <returns>Array of labels or empty array if none are present.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetFeatureName(System.Type)">
            <summary>
            Provides feature name which is determined from name of <paramref name="featureType"/>.
            </summary>
            <param name="featureType">Feature type.</param>
            <returns>Feature name.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetFeatureDescription(System.Type)">
            <summary>
            Provides feature description which is determined from attribute implementing <see cref="T:LightBDD.Core.Extensibility.IFeatureDescriptionAttribute"/> in first instance, then by <see cref="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetImplementationSpecificFeatureDescription(System.Type)"/>() method.
            Returns description or <c>null</c> if none is present.
            </summary>
            <param name="featureType">Feature type.</param>
            <returns>Feature description or <c>null</c>.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.CaptureCurrentScenario">
            <summary>
            Provides currently executed scenario details, that later can be used to build scenario metadata.
            </summary>
            <returns><see cref="T:LightBDD.Core.Extensibility.ScenarioDescriptor"/> object.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetScenarioName(LightBDD.Core.Extensibility.ScenarioDescriptor)">
            <summary>
            Provides <see cref="T:LightBDD.Core.Metadata.INameInfo"/> object containing information about scenario name represented by <paramref name="scenarioDescriptor"/>.
            </summary>
            <param name="scenarioDescriptor">Scenario descriptor.</param>
            <returns><see cref="T:LightBDD.Core.Metadata.INameInfo"/> object.</returns>
        </member>
        <member name="T:LightBDD.Core.Extensibility.DefaultCultureInfoProvider">
            <summary>
            Default implementation of <see cref="T:LightBDD.Core.Extensibility.ICultureInfoProvider"/> returning <c>CultureInfo.InvariantCulture</c>.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.DefaultCultureInfoProvider.GetCultureInfo">
            <summary>
            Returns CultureInfo.InvariantCulture that should be used for text formatting.
            </summary>
            <returns>CultureInfo.InvariantCulture.</returns>
        </member>
        <member name="T:LightBDD.Core.Extensibility.ExecutionContextDescriptor">
            <summary>
            Class describing execution context for contextual scenarios or steps.
            </summary>
        </member>
        <member name="F:LightBDD.Core.Extensibility.ExecutionContextDescriptor.NoContext">
            <summary>
            No context descriptor.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.ExecutionContextDescriptor.ScopeConfigurator">
            <summary>
            Returns container configurator function used to configure container used in the execution context scope.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.ExecutionContextDescriptor.ContextResolver">
            <summary>
            Returns context resolver function used to create context.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ExecutionContextDescriptor.#ctor(System.Func{LightBDD.Core.Dependencies.IDependencyResolver,System.Object},System.Action{LightBDD.Core.Dependencies.ContainerConfigurator})">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ExecutionContextDescriptor.#ctor(System.Func{System.Object},System.Boolean)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.Execution.IExecutionExtensions">
            <summary>
            Interface specifying extensions that should be used by LightBDD.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.Execution.IExecutionExtensions.ScenarioDecorators">
            <summary>
            Collection of scenario decorators.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.Execution.IExecutionExtensions.StepDecorators">
            <summary>
            Collection of step decorators.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.Execution.IScenarioDecorator">
            <summary>
            Interface describing scenario execution extension that can be used by LightBDD to decorate scenario execution.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.Execution.IScenarioDecorator.ExecuteAsync(LightBDD.Core.Execution.IScenario,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Method allowing to decorate scenario invocation specified by <paramref name="scenarioInvocation"/>.<br/>
            Any exceptions thrown from <paramref name="scenarioInvocation"/> will be wrapped in <see cref="T:LightBDD.Core.Execution.ScenarioExecutionException"/>, which means that if this method suppose to handle exceptions, it will have to use <see cref="P:System.Exception.InnerException"/> property of <see cref="T:LightBDD.Core.Execution.ScenarioExecutionException"/>.
            It is allowed to throw any exception type from this method.
            </summary>
            <param name="scenario">Scenario that is being executed.</param>
            <param name="scenarioInvocation">Invocation that should be called in the method body.</param>
            <returns>Execution task.</returns>
        </member>
        <member name="T:LightBDD.Core.Extensibility.Execution.IScenarioDecoratorAttribute">
            <summary>
            Attribute interface allowing to enhance scenario execution with additional logic.
            Decorators will be executed in order specified by <see cref="P:LightBDD.Core.Extensibility.IOrderedAttribute.Order"/> property, after globally registered scenario decorators with <see cref="T:LightBDD.Core.Configuration.ExecutionExtensionsConfiguration"/>.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.Execution.IStepDecorator">
            <summary>
            Interface describing step execution extension that can be used by LightBDD to decorate step execution.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.Execution.IStepDecorator.ExecuteAsync(LightBDD.Core.Execution.IStep,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Method allowing to decorate step invocation specified by <paramref name="stepInvocation"/>.<br/>
            Any exceptions thrown from <paramref name="stepInvocation"/> will be wrapped in <see cref="T:LightBDD.Core.Execution.ScenarioExecutionException"/>, which means that if this method suppose to handle exceptions, it will have to use <see cref="P:System.Exception.InnerException"/> property of <see cref="T:LightBDD.Core.Execution.ScenarioExecutionException"/>.
            It is allowed to throw any exception type from this method.
            </summary>
            <param name="step">Step that is being executed.</param>
            <param name="stepInvocation">Invocation that should be called in the method body.</param>
            <returns>Execution task.</returns>
        </member>
        <member name="T:LightBDD.Core.Extensibility.Execution.IStepDecoratorAttribute">
            <summary>
            Attribute interface allowing to enhance step execution with additional logic.
            Decorators will be executed in order specified by <see cref="P:LightBDD.Core.Extensibility.IOrderedAttribute.Order"/> property, after globally registered step decorators with <see cref="T:LightBDD.Core.Configuration.ExecutionExtensionsConfiguration"/>.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.FeatureRunnerRepository">
            <summary>
            Funner factory allowing to create <see cref="T:LightBDD.Core.Extensibility.IFeatureRunner"/> instances and maintaining list of instantiated runners.
            This class should be used by projects integrating LightBDD with testing frameworks.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.FeatureRunnerRepository.#ctor(LightBDD.Core.Extensibility.IntegrationContext)">
            <summary>
            Constructor instantiating factory with specified runner context.
            </summary>
            <param name="integrationContext">Runner context.</param>
        </member>
        <member name="M:LightBDD.Core.Extensibility.FeatureRunnerRepository.GetRunnerFor(System.Type)">
            <summary>
            Returns feature runner for specified feature type.
            If runner already exists for <paramref name="featureType"/>, the existing instance is returned, otherwise a new instance is being created.
            </summary>
            <param name="featureType">Type of class describing feature and holding list of scenario methods.</param>
            <returns>Feature runner.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="featureType"/> is null.</exception>
        </member>
        <member name="P:LightBDD.Core.Extensibility.FeatureRunnerRepository.AllRunners">
            <summary>
            All currently instantiated runners.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.FeatureRunnerRepository.Dispose">
            <inheritdoc />
        </member>
        <member name="T:LightBDD.Core.Extensibility.ICoreScenarioBuilder">
            <summary>
            <see cref="T:LightBDD.Core.Extensibility.ICoreScenarioBuilder"/> integration interface allowing to construct scenario for execution.
            The interface is dedicated for projects extending LightBDD with user friendly API for running scenarios - it should not be used directly by regular LightBDD users.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ICoreScenarioBuilder.AddSteps(System.Collections.Generic.IEnumerable{LightBDD.Core.Extensibility.StepDescriptor})">
            <summary>
            Configures steps to be executed with scenario.
            </summary>
            <param name="steps">Steps to execute.</param>
            <returns>Self.</returns>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="steps"/> are <c>null</c>.</exception>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ICoreScenarioBuilder.WithCapturedScenarioDetails">
            <summary>
            Configures scenario details with values inferred by <see cref="T:LightBDD.Core.Extensibility.CoreMetadataProvider"/>.
            </summary>
            <returns>Self.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ICoreScenarioBuilder.WithCapturedScenarioDetailsIfNotSpecified">
            <summary>
            Configures scenario details with values inferred by <see cref="T:LightBDD.Core.Extensibility.CoreMetadataProvider"/>, but only if scenario name has not been provided yet.
            </summary>
            <returns>Self.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ICoreScenarioBuilder.WithLabels(System.String[])">
            <summary>
            Configures scenario with labels.
            </summary>
            <param name="labels">Labels to set.</param>
            <returns>Self.</returns>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="labels"/> are <c>null</c>.</exception>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ICoreScenarioBuilder.WithCategories(System.String[])">
            <summary>
            Configures scenario with categories.
            </summary>
            <param name="categories">Categories to set.</param>
            <returns>Self.</returns>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="categories"/> are <c>null</c>.</exception>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ICoreScenarioBuilder.WithName(System.String)">
            <summary>
            Configures scenario with name.
            </summary>
            <param name="name">Name to set.</param>
            <returns>Self.</returns>
            <exception cref="T:System.ArgumentException">Throws when <paramref name="name"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ICoreScenarioBuilder.WithContext(System.Func{System.Object},System.Boolean)">
            <summary>
            Configures scenario to be executed with context provided by <paramref name="contextProvider"/>.
            </summary>
            <param name="contextProvider">Context provider function.</param>
            <param name="takeOwnership">Specifies if scenario runner should take ownership of the context instance. If set to true and context instance implements <see cref="T:System.IDisposable"/>, it will be disposed after scenario finish.</param>
            <returns>Self.</returns>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="contextProvider"/> is <c>null</c>.</exception>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ICoreScenarioBuilder.WithContext(System.Func{LightBDD.Core.Dependencies.IDependencyResolver,System.Object},System.Action{LightBDD.Core.Dependencies.ContainerConfigurator})">
            <summary>
            Configures scenario to be executed with context provided by <paramref name="contextProvider"/>.
            </summary>
            <param name="contextProvider">Context provider function.</param>
            <param name="scopeConfigurator"></param>
            <returns>Self.</returns>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="contextProvider"/> is <c>null</c>.</exception>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ICoreScenarioBuilder.WithScenarioDecorators(System.Collections.Generic.IEnumerable{LightBDD.Core.Extensibility.Execution.IScenarioDecorator})">
            <summary>
            Configures scenario to be executed with additional decorators provided by <paramref name="scenarioDecorators"/>.
            </summary>
            <param name="scenarioDecorators">Decorators to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ICoreScenarioBuilder.Build">
            <summary>
            Builds scenario.
            </summary>
            <returns>Scenario.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when name or steps are not defined.</exception>
        </member>
        <member name="P:LightBDD.Core.Extensibility.ICoreScenarioBuilder.Configuration">
            <summary>
            Returns current <see cref="T:LightBDD.Core.Configuration.LightBddConfiguration"/> instance.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.ICultureInfoProvider">
            <summary>
            Interface allowing to configure CultureInfo used in formatting text by LightBDD.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ICultureInfoProvider.GetCultureInfo">
            <summary>
            Returns CultureInfo that should be used for text formatting.
            </summary>
            <returns>CultureInfo to use.</returns>
        </member>
        <member name="T:LightBDD.Core.Extensibility.IFeatureDescriptionAttribute">
             <summary>
             Feature description attribute interface that can be applied on feature test class.
             May be used to enrich feature class with description like "In order to... As a... I want to..."
             or similar, that would be used by progress notifier and would be included in summary.
            
             If given implementation supports alternative description attributes, and both are applied on class, this one would be used.
             </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.IFeatureDescriptionAttribute.Description">
            <summary>
            Feature description.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.IFeatureFixtureRunner">
            <summary>
            Interface allowing to define and execute scenarios in programmatic manner.
            The interface is dedicated for projects extending LightBDD with user friendly API for running scenarios - it should not be used directly by regular LightBDD users.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.IFeatureFixtureRunner.NewScenario">
            <summary>
            Creates new scenario to execute.
            </summary>
            <returns>Scenario runner instance.</returns>
        </member>
        <member name="T:LightBDD.Core.Extensibility.IFeatureRunner">
            <summary>
            The feature runner interface allowing to execute feature tests and collect execution results.
            The instances of this interface can be provided by <see cref="T:LightBDD.Core.Extensibility.FeatureRunnerRepository"/>.
            <para>It is expected that for given feature test class, one instance of <see cref="T:LightBDD.Core.Extensibility.IFeatureRunner"/> is created, while each class instance will have dedicated instance of <see cref="T:LightBDD.Core.Extensibility.IFeatureFixtureRunner"/>.</para>
            <para>Note for testing framework integration projects: The feature runner should be disposed after all scenarios execution.</para>
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.IFeatureRunner.ForFixture(System.Object)">
            <summary>
            Returns <see cref="T:LightBDD.Core.Extensibility.IFeatureFixtureRunner"/> instance allowing to execute scenario tests on <paramref name="fixture"/> object.
            </summary>
            <param name="fixture">Fixture object containing scenario tests to execute.</param>
            <returns><see cref="T:LightBDD.Core.Extensibility.IFeatureFixtureRunner"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="fixture"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Throws when <paramref name="fixture"/> type does not match feature type that <see cref="T:LightBDD.Core.Extensibility.IFeatureRunner"/> has been created for by <see cref="T:LightBDD.Core.Extensibility.FeatureRunnerRepository"/>.</exception>
        </member>
        <member name="M:LightBDD.Core.Extensibility.IFeatureRunner.GetFeatureResult">
            <summary>
            Returns current results of feature tests.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LightBDD.Core.Extensibility.ILabelAttribute">
            <summary>
            Label attribute interface that can be applied on feature test class or scenario method.
            May be used to link feature/scenario with external tools by storing ticket number.
            Multiple labels per item are supported.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.ILabelAttribute.Label">
            <summary>
            Specified label.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.IntegrationContext">
            <summary>
            A context offering integration objects used to configure runners.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.IntegrationContext.MetadataProvider">
            <summary>
            Returns metadata provider.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.IntegrationContext.NameFormatter">
            <summary>
            Returns name formatter.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.IntegrationContext.ExceptionToStatusMapper">
            <summary>
            Returns exception to status mapping method.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.IntegrationContext.FeatureProgressNotifier">
            <summary>
            Returns feature progress notifier.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.IntegrationContext.ScenarioProgressNotifierProvider">
            <summary>
            Returns scenario progress notifier provider method.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.IntegrationContext.ExecutionExtensions">
            <summary>
            Returns LightBDD execution extensions.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.IntegrationContext.Configuration">
            <summary>
            Returns <see cref="T:LightBDD.Core.Configuration.LightBddConfiguration"/> used to configure tests.
            It is expected that returned object will be sealed which means that it should be used only for reading configuration, but not altering it.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.IntegrationContext.DependencyContainer">
            <summary>
            Returns configured <see cref="T:LightBDD.Core.Dependencies.IDependencyContainer"/>, used to resolve dependencies for LightBDD contexts.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.IntegrationContext.ValueFormattingService">
            <summary>
            Returns value formatting service.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.IOrderedAttribute">
            <summary>
            Interface defining <see cref="P:LightBDD.Core.Extensibility.IOrderedAttribute.Order"/> property that for attributes that are allowed to be applied multiple times but their order matters.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.IOrderedAttribute.Order">
            <summary>
            Order in which attributes should be applied, where instances of lower values will be applied first.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.IScenarioCategoryAttribute">
             <summary>
             Scenario category attribute interface that can be applied on scenario test method.
             May be used to associate scenarios with specific categories.
             It is possible to apply multiple categories on given scenario.
            
             If given implementation supports alternative category attributes, and both are applied on scenario method, all of them would be used.
             </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.IScenarioCategoryAttribute.Category">
            <summary>
            Scenario category name.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.LightBddConfigurationAware">
            <summary>
            A class exposing current <see cref="T:LightBDD.Core.Configuration.LightBddConfiguration"/> instance for class deriving from it.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.LightBddConfigurationAware.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.LightBddConfigurationAware.Configuration">
            <summary>
            Returns current <see cref="T:LightBDD.Core.Configuration.LightBddConfiguration"/> configuration.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if LightBDD is not initialized yet or tests are already finished.</exception>
        </member>
        <member name="T:LightBDD.Core.Extensibility.ParameterDescriptor">
            <summary>
            Class describing scenario or step method parameter and offering a method to evaluate parameter value.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ParameterDescriptor.FromConstant(System.Reflection.ParameterInfo,System.Object)">
            <summary>
            Creates <see cref="T:LightBDD.Core.Extensibility.ParameterDescriptor"/> object representing <paramref name="parameterInfo"/> with constant value <paramref name="value"/>.
            </summary>
            <param name="parameterInfo"><see cref="P:LightBDD.Core.Extensibility.ParameterDescriptor.ParameterInfo"/> object describing parameter.</param>
            <param name="value">Constant value that would be bound to the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ParameterDescriptor.FromInvocation(System.Reflection.ParameterInfo,System.Func{System.Object,System.Object})">
            <summary>
            Creates <see cref="T:LightBDD.Core.Extensibility.ParameterDescriptor"/> object representing <paramref name="parameterInfo"/> with not-constant value provided by <paramref name="valueEvaluator"/>.
            It is expected that <paramref name="valueEvaluator"/> would be used once to evaluate parameter value, just before execution of method requiring this parameter value.
            </summary>
            <param name="parameterInfo"><see cref="P:LightBDD.Core.Extensibility.ParameterDescriptor.ParameterInfo"/> object describing parameter.</param>
            <param name="valueEvaluator">Value evaluator function that should be used to retrieve parameter value.</param>
            <returns></returns>
        </member>
        <member name="P:LightBDD.Core.Extensibility.ParameterDescriptor.RawName">
            <summary>
            Returns parameter raw name.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.ParameterDescriptor.IsConstant">
            <summary>
            Returns <c>true</c> if parameter is defined as constant with known value or <c>false</c> if parameter value has to be evaluated first in order to be known.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.ParameterDescriptor.ParameterInfo">
            <summary>
            Returns <see cref="P:LightBDD.Core.Extensibility.ParameterDescriptor.ParameterInfo"/> object describing this parameter.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.ParameterDescriptor.ValueEvaluator">
            <summary>
            Returns parameter value evaluator that would be used to evaluate parameter value during execution.
            The value evaluator function parameter represents scenario context object defined by <see cref="M:LightBDD.Core.Extensibility.ICoreScenarioBuilder.WithContext(System.Func{System.Object},System.Boolean)"/>() method.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.Results.CompositeStepResultDescriptor">
            <summary>
            Step result descriptor class representing composite step, i.e. one made of collection of sub-steps.
            It allows to define a list of additional sub steps that would be included in step execution, making given step passing only if all are successful.
            It allows also to specify dedicated context instance that would be passed to all sub-steps.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.Results.CompositeStepResultDescriptor.#ctor(LightBDD.Core.Extensibility.ExecutionContextDescriptor,System.Collections.Generic.IEnumerable{LightBDD.Core.Extensibility.StepDescriptor})">
            <summary>
            Constructor allowing to initialize instance with sub steps and context provider.
            </summary>
            <param name="subStepsContext">Context descriptor that will be used to instantiate context for the sub steps.</param>
            <param name="subSteps">Sub steps.</param>
        </member>
        <member name="P:LightBDD.Core.Extensibility.Results.CompositeStepResultDescriptor.SubSteps">
            <summary>
            Collection of sub steps.
            All defined sub steps would be executed just after descriptor is returned and will be included into overall step status as well as execution time.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.Results.CompositeStepResultDescriptor.SubStepsContext">
            <summary>
            Returns context descriptor that will be used to instantiate context for the sub steps.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.Results.DefaultStepResultDescriptor">
            <summary>
            Default step result descriptor, bringing no additional meaning for the step.
            </summary>
        </member>
        <member name="F:LightBDD.Core.Extensibility.Results.DefaultStepResultDescriptor.Instance">
            <summary>
            Instance that should be used if <see cref="T:LightBDD.Core.Extensibility.Results.DefaultStepResultDescriptor"/> is expected to be returned.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.Results.IStepResultDescriptor">
            <summary>
            A marker interface describing step execution result.
            Each step executed by LightBDD engine is expected to return instance implementing this interface.
            LightBDD.Core offers few types that implement this interface, enhancing step method with additional behavior.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.ScenarioDescriptor">
            <summary>
            Class describing scenario including the scenario method info and parameters.
            It is designed to provide all required information for <see cref="T:LightBDD.Core.Extensibility.CoreMetadataProvider"/>() method to build <see cref="T:LightBDD.Core.Metadata.IScenarioInfo"/> object.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.ScenarioDescriptor.#ctor(System.Reflection.MethodBase,System.Object[])">
            <summary>
            Constructor creating <see cref="T:LightBDD.Core.Extensibility.ScenarioDescriptor"/> instance.
            </summary>
            <param name="methodInfo">Scenario method info.</param>
            <param name="arguments">Scenario arguments. If scenario arguments are not known (unable to obtain), the value of <paramref name="arguments"/> should be null.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if number or <paramref name="arguments"/> is not null and does not match number of <paramref name="methodInfo"/> parameters.</exception>
        </member>
        <member name="P:LightBDD.Core.Extensibility.ScenarioDescriptor.MethodInfo">
            <summary>
            Returns scenario method.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.ScenarioDescriptor.Parameters">
            <summary>
            Returns scenario method parameter descriptors or empty array if parameters are not known or method is parameterless.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.StepDescriptor">
            <summary>
            Class describing scenario step, including its metadata information as well invocation method together with parameters required to its execution.
            It is designed to provide all required information for <see cref="M:LightBDD.Core.Extensibility.CoreMetadataProvider.GetStepName(LightBDD.Core.Extensibility.StepDescriptor,System.String)"/>() method to provide <see cref="T:LightBDD.Core.Metadata.IStepNameInfo"/> object.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Extensibility.StepDescriptor.#ctor(System.String,LightBDD.Core.Extensibility.StepFunc,LightBDD.Core.Extensibility.ParameterDescriptor[])">
            <summary>
            Constructor allowing to specify name, step invocation function and step parameters.
            The <see cref="P:LightBDD.Core.Extensibility.StepDescriptor.PredefinedStepType"/> is set to <c>null</c>.
            </summary>
            <param name="rawName">Step raw name.</param>
            <param name="stepInvocation">Step invocation function.</param>
            <param name="parameters">Step invocation function parameters.</param>
            <exception cref="T:System.ArgumentException">Throws when <paramref name="rawName"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="stepInvocation"/> or <paramref name="parameters"/> is null.</exception>
        </member>
        <member name="M:LightBDD.Core.Extensibility.StepDescriptor.#ctor(System.Reflection.MethodBase,LightBDD.Core.Extensibility.StepFunc,LightBDD.Core.Extensibility.ParameterDescriptor[])">
            <summary>
            Constructor allowing to specify predefined step type, methodInfo, step invocation function and step parameters.
            </summary>
            <param name="methodInfo">Step method info.</param>
            <param name="stepInvocation">Step invocation function.</param>
            <param name="parameters">Step invocation function parameters.</param>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="methodInfo"/>, <paramref name="stepInvocation"/> or <paramref name="parameters"/> is null.</exception>
        </member>
        <member name="P:LightBDD.Core.Extensibility.StepDescriptor.RawName">
            <summary>
            Returns step raw name.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.StepDescriptor.PredefinedStepType">
            <summary>
            Returns predefined step type.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.StepDescriptor.MethodInfo">
            <summary>
            Returns method info describing the step or null if method info is not available.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.StepDescriptor.StepInvocation">
            <summary>
            Returns step invocation function accepting scenario context object configured with <see cref="M:LightBDD.Core.Extensibility.ICoreScenarioBuilder.WithContext(System.Func{System.Object},System.Boolean)"/>() method and step parameters.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Extensibility.StepDescriptor.Parameters">
            <summary>
            Returns step parameter descriptors.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Extensibility.StepFunc">
            <summary>
            Step function.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Formatting.ExceptionFormatting.DefaultExceptionFormatter">
            <summary>
            Default implementation of exception formatter.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Formatting.ExceptionFormatting.DefaultExceptionFormatter.#ctor">
            <summary>
            Constructor initializing formatter with stack trace lines limit equal 8 and default member exclusions.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Formatting.ExceptionFormatting.DefaultExceptionFormatter.Format(System.Exception)">
            <summary>
            Formats the exception by returning exception type name and message, followed by inner exception chain, followed by call stack information.
            The stack trace information can be shortened by filtering out members (any call entries starting with specified text) configured with <see cref="M:LightBDD.Core.Formatting.ExceptionFormatting.DefaultExceptionFormatter.WithMembersExcludedFromStackTrace(System.String[])"/>() and number of printed lines configured with <see cref="M:LightBDD.Core.Formatting.ExceptionFormatting.DefaultExceptionFormatter.WithStackTraceLinesLimit(System.Int32)"/>().
            </summary>
            <param name="exception">Exception to format</param>
            <returns>Formatted exception details.</returns>
        </member>
        <member name="M:LightBDD.Core.Formatting.ExceptionFormatting.DefaultExceptionFormatter.WithMembersExcludedFromStackTrace(System.String[])">
            <summary>
            Adds <paramref name="membersPatterns"/> regex patterns to a list of members that should be excluded from printing when stack trace is rendered.
            Each pattern will be used to filter out stack trace lines starting with <c>at ...</c> where <c>at</c> prefix should not be added to the pattern.
            
            The method has additive effect and can be used many times.
            </summary>
            <param name="membersPatterns">Patterns to be used to filter out stack trace lines starting with <c>at ...</c> prefix</param>
            <returns>Self.</returns>
        </member>
        <member name="M:LightBDD.Core.Formatting.ExceptionFormatting.DefaultExceptionFormatter.WithAllMembersIncludedOnStackTrace">
            <summary>
            Clears all stack trace members exclusions (the default exclusions will be cleared as well) and removes the line limit.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="M:LightBDD.Core.Formatting.ExceptionFormatting.DefaultExceptionFormatter.WithStackTraceLinesLimit(System.Int32)">
            <summary>
            Specifies limit of the printed stack trace lines.
            By default it is set to 4 lines per exception.
            </summary>
            <param name="linesLimit">Maximum number of lines that will be printed</param>
            <returns>Self.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="linesLimit"/> is less than 1.</exception>
        </member>
        <member name="T:LightBDD.Core.Formatting.INameFormatter">
            <summary>
            Interface allowing to format name into readable text.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Formatting.INameFormatter.FormatName(System.String)">
            <summary>
            Formats provided name into readable text.
            </summary>
            <param name="name">Name to format.</param>
            <returns>Formatted name.</returns>
        </member>
        <member name="T:LightBDD.Core.Formatting.NameDecorators.INameDecorator">
            <summary>
            Interface allowing to decorate name.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Formatting.NameDecorators.INameDecorator.DecorateParameterValue(LightBDD.Core.Metadata.INameParameterInfo)">
            <summary>
            Decorates provided parameter.
            </summary>
            <param name="parameter">Parameter to decorate.</param>
            <returns>Decorated parameter text.</returns>
        </member>
        <member name="M:LightBDD.Core.Formatting.NameDecorators.INameDecorator.DecorateNameFormat(System.String)">
            <summary>
            Decorates name format.
            </summary>
            <param name="nameFormat">Name format to decorate.</param>
            <returns>Decorated text.</returns>
        </member>
        <member name="T:LightBDD.Core.Formatting.NameDecorators.IStepNameDecorator">
            <summary>
            Interface decorating step name.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Formatting.NameDecorators.IStepNameDecorator.DecorateStepTypeName(LightBDD.Core.Metadata.IStepTypeNameInfo)">
            <summary>
            Decorates step type name.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Formatting.NameDecorators.StepNameDecorators">
            <summary>
            Class providing step name decorator instances.
            </summary>
        </member>
        <member name="F:LightBDD.Core.Formatting.NameDecorators.StepNameDecorators.Default">
            <summary>
            Default step name decorator, where:
            * step type is returned intact if not null, or string.Empty is returned,
            * parameter value is returned intact if not null, or string.Empty is returned,
            * name format is returned intact if not null, or string.Empty is returned.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Formatting.Parameters.IFormatSymbols">
            <summary>
            Interface providing format symbols that should be used in parameter formatting.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Formatting.Parameters.IFormatSymbols.NullValue">
            <summary>
            Null value text representation.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Formatting.Parameters.ParameterFormatterAttribute">
            <summary>
            Parameter formatter attribute, allowing to define custom step parameter formatting method.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Formatting.Parameters.ParameterFormatterAttribute.CanFormat(System.Type)">
            <summary>
            Default implementation accepting any type.
            </summary>
            <returns>True.</returns>
        </member>
        <member name="P:LightBDD.Core.Formatting.Parameters.ParameterFormatterAttribute.Symbols">
            <summary>
            Returns format symbols such as null value text representation.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Formatting.Parameters.ParameterFormatterAttribute.Order">
            <inheritdoc />
        </member>
        <member name="M:LightBDD.Core.Formatting.Parameters.ParameterFormatterAttribute.FormatValue(System.Object,LightBDD.Core.Formatting.Values.IValueFormattingService)">
            <summary>
            Formats provided <paramref name="value"/> and returns it's string representation.
            The provided <paramref name="formattingService"/> can be used to obtain current <see cref="T:System.Globalization.CultureInfo"/> if needed. It can be also used to format inner values if formatted type is collection or complex object.
            </summary>
            <param name="value">Value to format.</param>
            <param name="formattingService">Formatting service allowing to retrieve current <see cref="T:System.Globalization.CultureInfo"/> or format inner values of provided object.</param>
            <returns>Formatted value.</returns>
        </member>
        <member name="T:LightBDD.Core.Formatting.TimeFormatter">
            <summary>
            Extension methods for formatting TimeSpan values.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Formatting.TimeFormatter.FormatPretty(System.TimeSpan)">
            <summary>
            This method returns up to 2 most meaningful time components of given time, to make it most readable.
            Maximal supported time component is 'day', while the minimal is 'millisecond'.
            TimeSpan value being less than 1ms but larger than 0 would be presented as &lt;1ms. 
            
            Example values:
            <list type="bullet">
            <item><description>1d 12h</description></item>
            <item><description>5h</description></item>
            <item><description>5m 02s</description></item>
            <item><description>2s 527ms</description></item>
            <item><description>&lt;1ms</description></item>
            <item><description>0ms</description></item>
            </list>
            </summary>
        </member>
        <member name="T:LightBDD.Core.Formatting.Values.DefaultValueFormatter">
            <summary>
            Default implementation of <see cref="T:LightBDD.Core.Formatting.Values.IValueFormatter"/> using <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> to format provided value.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Formatting.Values.DefaultValueFormatter.Instance">
            <summary>
            Default instance.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Formatting.Values.DefaultValueFormatter.FormatValue(System.Object,LightBDD.Core.Formatting.Values.IValueFormattingService)">
            <summary>
            Formats value provided with <paramref name="value"/> parameter using <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> and current <see cref="T:System.Globalization.CultureInfo"/> provided by <paramref name="formattingService"/>.
            </summary>
            <param name="value">Value to format.</param>
            <param name="formattingService">Formatting service.</param>
            <returns>Formatted value.</returns>
        </member>
        <member name="T:LightBDD.Core.Formatting.Values.IConditionalValueFormatter">
            <summary>
            Interfce allowing to define a formatting method for objects of types that are accepted by <see cref="M:LightBDD.Core.Formatting.Values.IConditionalValueFormatter.CanFormat(System.Type)"/> method.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Formatting.Values.IConditionalValueFormatter.CanFormat(System.Type)">
            <summary>
            Returns true if type specified by <paramref name="type"/> parameter is supported by formatter.
            </summary>
            <param name="type">Type to be checked.</param>
            <returns>True if <paramref name="type"/> is supported by formatter.</returns>
        </member>
        <member name="T:LightBDD.Core.Formatting.Values.ISelfFormattable">
            <summary>
            Interface allowing to define a formatting method for object implementing this interface.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Formatting.Values.ISelfFormattable.Format(LightBDD.Core.Formatting.Values.IValueFormattingService)">
            <summary>
            Returns string representation of current instance value.
            The provided <paramref name="formattingService"/> can be used to obtain current <see cref="T:System.Globalization.CultureInfo"/> if needed. It can be also used to format inner values if formatted type is collection or complex object.
            </summary>
            <param name="formattingService">Formatting service allowing to retrieve current <see cref="T:System.Globalization.CultureInfo"/> or format inner values of provided object.</param>
            <returns>Formatted value.</returns>
        </member>
        <member name="T:LightBDD.Core.Formatting.Values.IValueFormatter">
            <summary>
            Interface allowing to define a formatting method for objects.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Formatting.Values.IValueFormatter.FormatValue(System.Object,LightBDD.Core.Formatting.Values.IValueFormattingService)">
            <summary>
            Formats provided <paramref name="value"/> and returns it's string representation.
            The provided <paramref name="formattingService"/> can be used to obtain current <see cref="T:System.Globalization.CultureInfo"/> if needed. It can be also used to format inner values if formatted type is collection or complex object.
            </summary>
            <param name="value">Value to format.</param>
            <param name="formattingService">Formatting service allowing to retrieve current <see cref="T:System.Globalization.CultureInfo"/> or format inner values of provided object.</param>
            <returns>Formatted value.</returns>
        </member>
        <member name="T:LightBDD.Core.Formatting.Values.IValueFormattingService">
            <summary>
            Interface describing a formatting service being capable to format value of any type, including nulls as well as providing current <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Formatting.Values.IValueFormattingService.FormatValue(System.Object)">
            <summary>
            Formats value provided by <paramref name="value"/> parameter.
            </summary>
            <param name="value">Value to format.</param>
            <returns>Formatted string representation of the provided value.</returns>
        </member>
        <member name="M:LightBDD.Core.Formatting.Values.IValueFormattingService.GetCultureInfo">
            <summary>
            Returns current <see cref="T:System.Globalization.CultureInfo"/> that will be used to format values.
            </summary>
            <returns>Current <see cref="T:System.Globalization.CultureInfo"/> instance.</returns>
        </member>
        <member name="T:LightBDD.Core.Formatting.Values.ValueFormattingService">
            <summary>
            Default implementation of <see cref="T:LightBDD.Core.Formatting.Values.IValueFormattingService"/> allowing to format values basing on the provided <see cref="T:LightBDD.Core.Configuration.LightBddConfiguration"/> configuration as well as offering ability to override formatters.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Formatting.Values.ValueFormattingService.#ctor(LightBDD.Core.Configuration.LightBddConfiguration)">
            <summary>
            Constructor initializing instance with provided configuration.
            </summary>
            <param name="configuration">Configuration.</param>
        </member>
        <member name="M:LightBDD.Core.Formatting.Values.ValueFormattingService.#ctor(LightBDD.Core.Configuration.ValueFormattingConfiguration,LightBDD.Core.Extensibility.ICultureInfoProvider)">
            <summary>
            Constructor initializing instance with provided configuration.
            </summary>
            <param name="configuration">Configuration.</param>
            <param name="cultureInfoProvider">CultureInfo provider.</param>
        </member>
        <member name="M:LightBDD.Core.Formatting.Values.ValueFormattingService.FormatValue(System.Object)">
            <summary>
            Formats value provided by <paramref name="value"/> parameter.
            </summary>
            <param name="value">Value to format.</param>
            <returns>Formatted string representation of the provided value.</returns>
        </member>
        <member name="M:LightBDD.Core.Formatting.Values.ValueFormattingService.GetCultureInfo">
            <summary>
            Returns current <see cref="T:System.Globalization.CultureInfo"/> that will be used to format values.
            </summary>
            <returns>Current <see cref="T:System.Globalization.CultureInfo"/> instance.</returns>
        </member>
        <member name="M:LightBDD.Core.Formatting.Values.ValueFormattingService.WithFormattersOverride(LightBDD.Core.Formatting.Values.IConditionalValueFormatter[])">
            <summary>
            Creates a new <see cref="T:LightBDD.Core.Formatting.Values.IValueFormattingService"/> based on current instance and formatters specified by <paramref name="formatters"/> parameter, that new service instance will be use first.
            </summary>
            <param name="formatters">Formatters that will be used first, before falling back to ones specified in current instance of formatting service.</param>
            <returns></returns>
        </member>
        <member name="T:LightBDD.Core.Metadata.IFeatureInfo">
            <summary>
            Interface describing feature metadata.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.IFeatureInfo.Name">
            <summary>
            Returns feature name.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.IFeatureInfo.Labels">
            <summary>
            Returns feature labels or empty collection if none provided.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.IFeatureInfo.Description">
            <summary>
            Returns feature description or <c>null</c> if none provided.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Metadata.INameInfo">
            <summary>
            Interface describing name metadata.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Metadata.INameInfo.ToString">
            <summary>
            Formats name using <see cref="F:LightBDD.Core.Formatting.NameDecorators.StepNameDecorators.Default"/> step name decorator.
            </summary>
            <returns>Formatted name.</returns>
        </member>
        <member name="M:LightBDD.Core.Metadata.INameInfo.Format(LightBDD.Core.Formatting.NameDecorators.INameDecorator)">
            <summary>
            Formats name using provided decorator.
            </summary>
            <param name="decorator">Decorator.</param>
            <returns>Formatted name.</returns>
        </member>
        <member name="P:LightBDD.Core.Metadata.INameInfo.NameFormat">
            <summary>
            Returns name format.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.INameInfo.Parameters">
            <summary>
            Returns name parameters used in formatting or empty collection if name is not parameterized.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Metadata.INameParameterInfo">
            <summary>
            Interface describing name parameter metadata.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.INameParameterInfo.IsEvaluated">
            <summary>
            Returns <c>true</c> if parameter is already evaluated or <c>false</c> if not.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.INameParameterInfo.VerificationStatus">
            <summary>
            Returns verification status.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.INameParameterInfo.FormattedValue">
            <summary>
            Returns formatted parameter value.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Metadata.IScenarioInfo">
            <summary>
            Interface describing scenario metadata.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.IScenarioInfo.Name">
            <summary>
            Returns scenario name.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.IScenarioInfo.Labels">
            <summary>
            Returns scenario labels or empty collection if none specified.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.IScenarioInfo.Categories">
            <summary>
            Returns scenario categories or empty collection if none specified.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Metadata.IStepInfo">
            <summary>
            Interface describing scenario step metadata.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.IStepInfo.Name">
            <summary>
            Returns step name.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.IStepInfo.GroupPrefix">
            <summary>
            Returns group prefix if step belongs to a composite step, or <see cref="F:System.String.Empty"/> if step belongs to scenario.
            The group prefix is in form of <c>Z.Y.X.</c>, where X,Y,Z corresponds to parent, grand parent, grand-grand parent, etc. step number.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.IStepInfo.Number">
            <summary>
            Returns step number in all steps belonging to scenario or composite step.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.IStepInfo.Total">
            <summary>
            Returns total number of steps in scenario or composite step.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Metadata.IStepNameInfo">
            <summary>
            Interface describing step name metadata.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Metadata.IStepNameInfo.Format(LightBDD.Core.Formatting.NameDecorators.IStepNameDecorator)">
            <summary>
            Formats step name using provided decorator.
            </summary>
            <param name="decorator">Decorator.</param>
            <returns>Formatted name.</returns>
        </member>
        <member name="P:LightBDD.Core.Metadata.IStepNameInfo.StepTypeName">
            <summary>
            Returns step type name (may be null).
            </summary>
        </member>
        <member name="T:LightBDD.Core.Metadata.IStepTypeNameInfo">
            <summary>
            Interface describing step type name metadata.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Metadata.IStepTypeNameInfo.ToString">
            <summary>
            Returns <see cref="P:LightBDD.Core.Metadata.IStepTypeNameInfo.Name"/> value.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.IStepTypeNameInfo.Name">
            <summary>
            Returns normalized step type name.
            If consecutive steps are of the same type (like: GIVEN, GIVEN, GIVEN, WHEN, WHEN), the name of all except first one will be normalized with value of <see cref="F:LightBDD.Core.Configuration.StepTypeConfiguration.DefaultRepeatedStepReplacement"/> (producing steps like: GIVEN, AND, AND, WHEN, AND).
            </summary>
        </member>
        <member name="P:LightBDD.Core.Metadata.IStepTypeNameInfo.OriginalName">
            <summary>
            Returns original step type name (before normalization).
            </summary>
        </member>
        <member name="T:LightBDD.Core.Metadata.ParameterVerificationStatus">
            <summary>
            Parameter verification status.
            </summary>
        </member>
        <member name="F:LightBDD.Core.Metadata.ParameterVerificationStatus.NotApplicable">
            <summary>
            Indicates that given parameter is not verifiable.
            </summary>
        </member>
        <member name="F:LightBDD.Core.Metadata.ParameterVerificationStatus.Success">
            <summary>
            Indicates successful verification.
            </summary>
        </member>
        <member name="F:LightBDD.Core.Metadata.ParameterVerificationStatus.Failure">
            <summary>
            Indicates unsuccessful verification.
            </summary>
        </member>
        <member name="F:LightBDD.Core.Metadata.ParameterVerificationStatus.Exception">
            <summary>
            Indicates exception being thrown during verification.
            </summary>
        </member>
        <member name="F:LightBDD.Core.Metadata.ParameterVerificationStatus.NotProvided">
            <summary>
            Indicates that verifiable parameter was not verified.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Notification.IFeatureProgressNotifier">
            <summary>
            Feature progress notification interface.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Notification.IFeatureProgressNotifier.NotifyFeatureStart(LightBDD.Core.Metadata.IFeatureInfo)">
            <summary>
            Notifies that feature has started.
            </summary>
            <param name="feature">Feature info.</param>
        </member>
        <member name="M:LightBDD.Core.Notification.IFeatureProgressNotifier.NotifyFeatureFinished(LightBDD.Core.Results.IFeatureResult)">
            <summary>
            Notifies that feature has finished.
            </summary>
            <param name="feature">Feature result.</param>
        </member>
        <member name="T:LightBDD.Core.Notification.IScenarioProgressNotifier">
            <summary>
            Scenario progress notification interface.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Notification.IScenarioProgressNotifier.NotifyScenarioStart(LightBDD.Core.Metadata.IScenarioInfo)">
            <summary>
            Notifies that scenario has started.
            </summary>
            <param name="scenario">Scenario info.</param>
        </member>
        <member name="M:LightBDD.Core.Notification.IScenarioProgressNotifier.NotifyScenarioFinished(LightBDD.Core.Results.IScenarioResult)">
            <summary>
            Notifies that scenario has finished.
            </summary>
            <param name="scenario">Scenario result.</param>
        </member>
        <member name="M:LightBDD.Core.Notification.IScenarioProgressNotifier.NotifyStepStart(LightBDD.Core.Metadata.IStepInfo)">
            <summary>
            Notifies that step has started.
            </summary>
            <param name="step">Step info.</param>
        </member>
        <member name="M:LightBDD.Core.Notification.IScenarioProgressNotifier.NotifyStepFinished(LightBDD.Core.Results.IStepResult)">
            <summary>
            Notifies that step has finished.
            </summary>
            <param name="step">Step result.</param>
        </member>
        <member name="M:LightBDD.Core.Notification.IScenarioProgressNotifier.NotifyStepComment(LightBDD.Core.Metadata.IStepInfo,System.String)">
            <summary>
            Notifies that step has been commented.
            </summary>
            <param name="step">Step info.</param>
            <param name="comment">Comment.</param>
        </member>
        <member name="T:LightBDD.Core.Reporting.FeatureReportGenerator">
            <summary>
            Class allowing to generate and save reports for executed features.
            It supports multiple <see cref="T:LightBDD.Core.Reporting.IReportWriter"/> instances that can be specified in constructor.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Reporting.FeatureReportGenerator.#ctor(LightBDD.Core.Reporting.IReportWriter[])">
            <summary>
            Constructor configuring report generator with <paramref name="writers"/> that would be used to write reports on generator disposal.
            </summary>
            <param name="writers"></param>
        </member>
        <member name="M:LightBDD.Core.Reporting.FeatureReportGenerator.Aggregate(LightBDD.Core.Results.IFeatureResult)">
            <summary>
            Aggregates given feature result.
            </summary>
            <param name="featureResult">Feature result to aggregate.</param>
        </member>
        <member name="M:LightBDD.Core.Reporting.FeatureReportGenerator.Dispose">
            <summary>
            Writes all aggregated results and disposes the object.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Reporting.IReportWriter">
            <summary>
            Interface for feature result summary writers.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Reporting.IReportWriter.Save(LightBDD.Core.Results.IFeatureResult[])">
            <summary>
            Saves feature <c>results</c>.
            </summary>
            <param name="results">Results to save.</param>
        </member>
        <member name="T:LightBDD.Core.Results.ExecutionStatus">
            <summary>
            Represents status of test / scenario.
            </summary>
        </member>
        <member name="F:LightBDD.Core.Results.ExecutionStatus.NotRun">
            <summary>
            Not run yet
            </summary>
        </member>
        <member name="F:LightBDD.Core.Results.ExecutionStatus.Passed">
            <summary>
            Passed
            </summary>
        </member>
        <member name="F:LightBDD.Core.Results.ExecutionStatus.Bypassed">
            <summary>
            Bypassed
            </summary>
        </member>
        <member name="F:LightBDD.Core.Results.ExecutionStatus.Ignored">
            <summary>
            Ignored / skipped
            </summary>
        </member>
        <member name="F:LightBDD.Core.Results.ExecutionStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="T:LightBDD.Core.Results.ExecutionTime">
            <summary>
            Class describing execution time.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Results.ExecutionTime.#ctor(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Constructor.
            </summary>
            <param name="start">Execution start.</param>
            <param name="duration">Execution duration.</param>
        </member>
        <member name="P:LightBDD.Core.Results.ExecutionTime.Start">
            <summary>
            Returns execution start.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.ExecutionTime.Duration">
            <summary>
            Returns execution duration.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.ExecutionTime.End">
            <summary>
            Returns execution end.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Results.IFeatureResult">
            <summary>
            Interface describing feature test result.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.IFeatureResult.Info">
            <summary>
            Returns feature details.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Results.IFeatureResult.GetScenarios">
            <summary>
            Returns results of scenarios executed within this feature.
            </summary>
            <returns>Collection of scenario results.</returns>
        </member>
        <member name="T:LightBDD.Core.Results.IScenarioResult">
            <summary>
            Interface describing scenario test result.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.IScenarioResult.Info">
            <summary>
            Returns scenario details.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.IScenarioResult.Status">
            <summary>
            Returns scenario execution status.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.IScenarioResult.StatusDetails">
            <summary>
            Returns status details.
            It will contain details for all bypassed, ignored or failed steps.
            It may be null if no additional details are provided.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.IScenarioResult.ExecutionTime">
            <summary>
            Returns scenario execution time.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Results.IScenarioResult.GetSteps">
            <summary>
            Returns results of steps executed within this scenario.
            </summary>
            <returns>Collection of step results.</returns>
        </member>
        <member name="T:LightBDD.Core.Results.IStepResult">
            <summary>
            Interface describing step test result.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.IStepResult.Info">
            <summary>
            Returns step details.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.IStepResult.Status">
            <summary>
            Returns step execution status.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.IStepResult.StatusDetails">
            <summary>
            Returns status details that contains reason for bypassed, ignored or failed steps.
            It may be null if no additional details are provided.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.IStepResult.ExecutionTime">
            <summary>
            Returns step execution time.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.IStepResult.Comments">
            <summary>
            Returns step comments or empty collection if no comments were made.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.IStepResult.ExecutionException">
            <summary>
            Returns exception caught during step execution or null if none occurred.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.IStepResult.Parameters">
            <summary>
            Returns the step parameter evaluation results.
            </summary>
        </member>
        <member name="M:LightBDD.Core.Results.IStepResult.GetSubSteps">
            <summary>
            Returns sub-steps if given step consists of any, or empty collection.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Results.Parameters.IInlineParameterDetails">
            <summary>
            Interface representing inline parameter details.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Results.Parameters.IParameterDetails">
            <summary>
            Interface representing parameter details.
            This interface represents most basic details, where more specific interfaces can be found for more complex parameters.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Results.Parameters.IParameterResult">
            <summary>
            Interface representing parameter result.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.Parameters.IParameterResult.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.Parameters.IParameterResult.Details">
            <summary>
            Parameter details.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Results.Parameters.IValueResult">
            <summary>
            Interface representing value result.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.Parameters.IValueResult.Value">
            <summary>
            Returns actual value.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.Parameters.IValueResult.Expectation">
            <summary>
            Returns expectation.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Results.Parameters.IVerificationResult">
            <summary>
            Interface offering the verification details of the parameter or it's value.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.Parameters.IVerificationResult.VerificationMessage">
            <summary>
            Returns verification message or null, if parameter validation is successful or not applicable.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.Parameters.IVerificationResult.VerificationStatus">
            <summary>
            Returns verification status.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Results.Parameters.Tabular.ITabularParameterColumn">
            <summary>
            Interface representing tabular parameter result table column.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.Parameters.Tabular.ITabularParameterColumn.Name">
            <summary>
            Returns column name.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.Parameters.Tabular.ITabularParameterColumn.IsKey">
            <summary>
            Returns <c>true</c> for key column.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Results.Parameters.Tabular.ITabularParameterDetails">
            <summary>
            Interface representing tabular parameter details.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.Parameters.Tabular.ITabularParameterDetails.Columns">
            <summary>
            Returns list of table columns.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.Parameters.Tabular.ITabularParameterDetails.Rows">
            <summary>
            Returns list of table rows.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Results.Parameters.Tabular.ITabularParameterRow">
            <summary>
            Interface representing tabular parameter result table row.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.Parameters.Tabular.ITabularParameterRow.Type">
            <summary>
            Returns row type.
            </summary>
        </member>
        <member name="P:LightBDD.Core.Results.Parameters.Tabular.ITabularParameterRow.Values">
            <summary>
            Returns row values, where order corresponds to the column order specified in <see cref="T:LightBDD.Core.Results.Parameters.Tabular.ITabularParameterDetails"/>.
            </summary>
        </member>
        <member name="T:LightBDD.Core.Results.Parameters.Tabular.TableRowType">
            <summary>
            Tabular parameter result table row type.
            </summary>
        </member>
        <member name="F:LightBDD.Core.Results.Parameters.Tabular.TableRowType.Matching">
            <summary>
            Matching row
            </summary>
        </member>
        <member name="F:LightBDD.Core.Results.Parameters.Tabular.TableRowType.Surplus">
            <summary>
            Surplus row
            </summary>
        </member>
        <member name="F:LightBDD.Core.Results.Parameters.Tabular.TableRowType.Missing">
            <summary>
            Missing row
            </summary>
        </member>
    </members>
</doc>
